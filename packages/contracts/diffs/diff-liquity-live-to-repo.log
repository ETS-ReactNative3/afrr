************************************************************
DIFF: ActivePool (live) to (repo)
************************************************************
136c136
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: BorrowerOperations (live) to (repo)
************************************************************
666c666
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: CollSurplusPool (live) to (repo)
************************************************************
123c123
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: CommunityIssuance (live) to (repo)
************************************************************
132c132
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: DefaultPool (live) to (repo)
************************************************************
110c110
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: GasPool (live) to (repo)
************************************************************
1,4d0
< /**
<  *Submitted for verification at Etherscan.io on 2021-04-06
< */
< 
22c18
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: HintHelpers (live) to (repo)
************************************************************
171c171
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: LockupContract (live) to (repo)
************************************************************
0a1,86
> // SPDX-License-Identifier: MIT
> 
> pragma solidity 0.6.11;
> 
> import "../Dependencies/SafeMath.sol";
> import "../Interfaces/ILQTYToken.sol";
> 
> /*
> * The lockup contract architecture utilizes a single LockupContract, with an unlockTime. The unlockTime is passed as an argument 
> * to the LockupContract's constructor. The contract's balance can be withdrawn by the beneficiary when block.timestamp > unlockTime. 
> * At construction, the contract checks that unlockTime is at least one year later than the Liquity system's deployment time. 
> 
> * Within the first year from deployment, the deployer of the LQTYToken (Liquity AG's address) may transfer LQTY only to valid 
> * LockupContracts, and no other addresses (this is enforced in LQTYToken.sol's transfer() function).
> * 
> * The above two restrictions ensure that until one year after system deployment, LQTY tokens originating from Liquity AG cannot 
> * enter circulating supply and cannot be staked to earn system revenue.
> */
> contract LockupContract {
>     using SafeMath for uint;
> 
>     // --- Data ---
>     string constant public NAME = "LockupContract";
> 
>     uint constant public SECONDS_IN_ONE_YEAR = 31536000; 
> 
>     address public immutable beneficiary;
> 
>     ILQTYToken public lqtyToken;
> 
>     // Unlock time is the Unix point in time at which the beneficiary can withdraw.
>     uint public unlockTime;
> 
>     // --- Events ---
> 
>     event LockupContractCreated(address _beneficiary, uint _unlockTime);
>     event LockupContractEmptied(uint _LQTYwithdrawal);
> 
>     // --- Functions ---
> 
>     constructor 
>     (
>         address _lqtyTokenAddress, 
>         address _beneficiary, 
>         uint _unlockTime
>     )
>         public 
>     {
>         lqtyToken = ILQTYToken(_lqtyTokenAddress);
> 
>         /*
>         * Set the unlock time to a chosen instant in the future, as long as it is at least 1 year after
>         * the system was deployed 
>         */
>         _requireUnlockTimeIsAtLeastOneYearAfterSystemDeployment(_unlockTime);
>         unlockTime = _unlockTime;
>         
>         beneficiary =  _beneficiary;
>         emit LockupContractCreated(_beneficiary, _unlockTime);
>     }
> 
>     function withdrawLQTY() external {
>         _requireCallerIsBeneficiary();
>         _requireLockupDurationHasPassed();
> 
>         ILQTYToken lqtyTokenCached = lqtyToken;
>         uint LQTYBalance = lqtyTokenCached.balanceOf(address(this));
>         lqtyTokenCached.transfer(beneficiary, LQTYBalance);
>         emit LockupContractEmptied(LQTYBalance);
>     }
> 
>     // --- 'require' functions ---
> 
>     function _requireCallerIsBeneficiary() internal view {
>         require(msg.sender == beneficiary, "LockupContract: caller is not the beneficiary");
>     }
> 
>     function _requireLockupDurationHasPassed() internal view {
>         require(block.timestamp >= unlockTime, "LockupContract: The lockup duration must have passed");
>     }
> 
>     function _requireUnlockTimeIsAtLeastOneYearAfterSystemDeployment(uint _unlockTime) internal view {
>         uint systemDeploymentTime = lqtyToken.getDeploymentStartTime();
>         require(_unlockTime >= systemDeploymentTime.add(SECONDS_IN_ONE_YEAR), "LockupContract: unlock time must be at least one year after system deployment");
>     }
> }


************************************************************
DIFF: LockupContractFactory (live) to (repo)
************************************************************
74c74
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: LQTYStaking (live) to (repo)
************************************************************
247c247
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: LQTYToken (live) to (repo)
************************************************************
366c366
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: LUSDToken (live) to (repo)
************************************************************
306c306
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: MultiTroveGetter (live) to (repo)
************************************************************
0a1,2
> // SPDX-License-Identifier: MIT
> 
3a6,7
> import "./TroveManager.sol";
> import "./SortedTroves.sol";
116c120
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: PriceFeed (live) to (repo)
************************************************************
571c571,572
< }
\ No newline at end of file
---
> }
> 


************************************************************
DIFF: SortedTroves (live) to (repo)
************************************************************
420c420
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: StabilityPool (live) to (repo)
************************************************************
397c397
< 
---
>         
998c998
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: TellorCaller (live) to (repo)
************************************************************
53c53
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: TroveManager (live) to (repo)
************************************************************
151a152
>         uint collToOffset;
417c418
<             emit TroveLiquidated(_borrower, singleLiquidation.entireTroveDebt, singleLiquidation.collToSendToSP, TroveManagerOperation.liquidateInRecoveryMode);
---
>             emit TroveLiquidated(_borrower, singleLiquidation.entireTroveDebt, singleLiquidation.collToOffset, TroveManagerOperation.liquidateInRecoveryMode);
484a486
>         singleLiquidation.collToOffset = collToOffset;
583c585
<                 vars.entireSystemColl = vars.entireSystemColl.sub(singleLiquidation.collToSendToSP).sub(singleLiquidation.collSurplus);
---
>                 vars.entireSystemColl = vars.entireSystemColl.sub(singleLiquidation.collToOffset).sub(singleLiquidation.collSurplus);
722c724
<                 vars.entireSystemColl = vars.entireSystemColl.sub(singleLiquidation.collToSendToSP);
---
>                 vars.entireSystemColl = vars.entireSystemColl.sub(singleLiquidation.collToOffset).sub(singleLiquidation.collSurplus);
1556c1558
< }
\ No newline at end of file
---
> }


************************************************************
DIFF: Unipool (live) to (repo)
************************************************************
243c243
< }
\ No newline at end of file
---
> }
